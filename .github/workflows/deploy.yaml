name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: eu-north-1
  IMAGE_TAG: ${{ github.sha }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Verify AWS credentials
      run: |
        aws sts get-caller-identity
        if [ $? -ne 0 ]; then
          echo "Failed to verify AWS credentials"
          exit 1
        fi

    - name: Login to Amazon ECR
      id: login-ecr
      run: |
        set -e
        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}
        echo "Login Successful"

    - name: Build and tag Docker image
      run: |
        set -e
        echo "Building Docker image..."
        docker build -t fastapi-docker .
        
        echo "Tagging image..."
        docker tag fastapi-docker:latest ${{ secrets.ECR_REPOSITORY }}:latest
        docker tag fastapi-docker:latest ${{ secrets.ECR_REPOSITORY }}:${IMAGE_TAG}
        
        echo "Build and tag complete"

    - name: Push Docker image to ECR
      run: |
        set -e
        echo "Pushing image to ECR..."
        docker push ${{ secrets.ECR_REPOSITORY }}:latest
        docker push ${{ secrets.ECR_REPOSITORY }}:${IMAGE_TAG}
        echo "Push complete"

    - name: Get current task definition
      run: |
        aws ecs describe-task-definition \
          --task-definition ${{ secrets.ECS_TASK_DEFINITION }} \
          --query taskDefinition > task-definition.json

    - name: Update ECS service
      run: |
        set -e
        echo "Updating ECS service..."
        aws ecs update-service \
          --cluster ${{ secrets.ECS_CLUSTER }} \
          --service ${{ secrets.ECS_SERVICE }} \
          --force-new-deployment \
          --task-definition ${{ secrets.ECS_TASK_DEFINITION }}

    - name: Wait for service stability
      run: |
        echo "Waiting for service to stabilize..."
        aws ecs wait services-stable \
          --cluster ${{ secrets.ECS_CLUSTER }} \
          --services ${{ secrets.ECS_SERVICE }}
        
        if [ $? -eq 0 ]; then
          echo "Deployment successful!"
        else
          echo "Deployment failed to stabilize"
          exit 1
        fi

    - name: Deployment Status
      if: always()
      run: |
        DEPLOY_STATUS=$?
        if [ $DEPLOY_STATUS -eq 0 ]; then
          echo "Deployment completed successfully"
          echo "Image: ${{ secrets.ECR_REPOSITORY }}:${IMAGE_TAG}"
        else
          echo "Deployment failed"
          exit 1
        fi